# Based on: https://docs.github.com/en/actions/guides/publishing-java-packages-with-maven

# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Deploy

on:
  release:
    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Maven
        run: mvn --batch-mode package --file pom.xml

      - name: Publish to GitHub Packages Apache Maven
        run: |
          # Need to make a dummy call to mvn help:evaluate because first time results in output like:
          # "Downloading from central: https://repo.maven.apache.org/..."
          # And later calls to `help:evaluate | grep` are only filtering out lines starting with [.
          mvn --batch-mode help:evaluate -Dexpression=project.version > /dev/null 2>&1

          artifactId=$(mvn help:evaluate -Dexpression=project.artifactId | grep -e '^[^\\[]')
          echo $artifactId

          version=$(mvn help:evaluate -Dexpression=project.version | grep -e '^[^\\[]')
          echo $version

          # Save the fatjar as the artifact
          ls -lahFtr target
          rm target/${artifactId}-${version}.jar
          mv target/${artifactId}-${version}-fatjar.jar target/${artifactId}-${version}.jar
          ls -lahFtr target

          # deploy:deploy because only want to deploy and not rebuild
          # jar:jar because it will populate the build context but not recreate jars
          # https://stackoverflow.com/questions/6308162/
          mvn --batch-mode jar:jar deploy:deploy -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}
